#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

#define COLS 16
#define ROWS 24

// Define as cores ANSI para destaque
#define BLUE_BACKGROUND "\x1b[44m"
#define RESET_COLOR "\x1b[0m"

void clearFileContent(FILE *file) {
    // Limpa todo o conteúdo do arquivo, preenchendo-o com zeros
    fseek(file, 0, SEEK_SET); // Move para o início do arquivo
    for (int i = 0; i < ROWS * COLS; i++) {
        fputc(0, file); // Escreve zeros em cada posição do arquivo
    }
    fflush(file);
    rewind(file); // Volta para o início do arquivo
}

void displayOptions() {
    printf("\nUse 'Backspace' para limpar tudo e salvar, 'w' para salvar, 'Esc' para retornar ao editor.\n");
}

void displayHexAscii(FILE *file, long cursorPosition) {
    unsigned char matriz[ROWS][COLS] = {0};
    unsigned char aux;
    unsigned char l =  0;
    unsigned char c =  0;

    // Lê o conteúdo do arquivo e exibe em hexadecimal e ASCII
    while (!feof(file) && fread(&aux, 1, 1, file) == 1) {
        matriz[l][c] = aux;
        c++;
        if (c >= COLS) {
            c = 0;
            l++;
            if (l >= ROWS) {
                break;
            }
        }
    }

    rewind(file);

    for (aux = 0; aux < 24; aux++) {
        printf("\n\n");
    }

    int initialRow = (24 - ROWS) / 2;

    for (l = 0; l < ROWS; l++) {
        printf("\n%20s", "");
        for (c = 0; c < COLS; c++) {
            if (l * COLS + c == cursorPosition) {
                printf(BLUE_BACKGROUND "%02x " RESET_COLOR, matriz[l][c]); // Destaque a posição do cursor
            } else {
                printf("%02x ", matriz[l][c]);
            }
        }
        printf("   ");
        for (c = 0; c < COLS; c++) {
            if (matriz[l][c] < 32 || matriz[l][c] > 126) {
                if (l * COLS + c == cursorPosition) {
                    printf(BLUE_BACKGROUND "." RESET_COLOR);
                } else {
                    printf(".");
                }
            } else {
                if (l * COLS + c == cursorPosition) {
                    printf(BLUE_BACKGROUND "%c" RESET_COLOR, matriz[l][c]);
                } else {
                    printf("%c", matriz[l][c]);
                }
            }
        }
        printf("\n");
    }

    printf("\n%20s", "");
    for (c = 0; c < COLS; c++) {
        printf("%02d ", c);
    }

    printf("\n\nCursor position: %ld", cursorPosition);
}

void refreshDisplay(FILE *file, long cursorPosition, int inOptionsMenu) {
    system("cls"); // Limpa a tela
    displayHexAscii(file, cursorPosition); // Exibe o conteúdo do arquivo e a posição do cursor
    if (inOptionsMenu) {
        displayOptions(); // Exibe as opções se estiver no menu de opções
    } else {
        printf("\n\n    Use as setas para mover o cursor                                      Aperte 'Esc' para exibir o menu de opcoes.\n");
    }
}

int main(void) {
    FILE *file;
    char filename[100];
    long cursorPosition = 0;

    printf("Entre com o nome do arquivo: ");
    scanf("%s", filename);

    if ((file = fopen(filename, "r+")) == NULL) {
        printf("\nFalha ao abrir o arquivo.");
        return -1;
    }

    refreshDisplay(file, cursorPosition, 0);

    int ch;
    int inOptionsMenu = 0;

    do {
        ch = getch();

        if (inOptionsMenu) {
            if (ch == 'w') {
                fflush(file); // Salva o conteúdo do arquivo
                printf("\nAlteracoes salvas. Saindo...\n");
                fclose(file);
                return 0;
            } else if (ch == 8) { // Tecla Backspace
                clearFileContent(file); // Limpa o conteúdo do arquivo
                fflush(file); // Salva as mudanças
                printf("\nArquivo limpo e alteracoes salvas. Saindo...\n");
                fclose(file);
                return 0;
            } else if (ch == 13) { // Tecla Enter
                printf("\nSaindo sem salvar...\n");
                fclose(file);
                return 0;
            } else if (ch == 27) { // Tecla Escape novamente para sair do menu
                inOptionsMenu = 0;
                refreshDisplay(file, cursorPosition, inOptionsMenu);
            }
        } else {
            if (ch == 224) { // Se o código de tecla for 224, é uma tecla especial (seta)
                ch = getch(); // Lê a segunda parte do código de tecla especial
                switch(ch) {
                    case 72: // Tecla de seta para cima
                        cursorPosition -= COLS;
                        break;
                    case 80: // Tecla de seta para baixo
                        cursorPosition += COLS;
                        break;
                    case 75: // Tecla de seta para esquerda
                        cursorPosition--;
                        break;
                    case 77: // Tecla de seta para direita
                        cursorPosition++;
                        break;
                }
                if (cursorPosition < 0) // Garante que o cursor não ultrapasse os limites do arquivo
                    cursorPosition = 0;
                if (cursorPosition >= ROWS * COLS)
                    cursorPosition = ROWS * COLS - 1;

                refreshDisplay(file, cursorPosition, inOptionsMenu);
            } else if (ch == 27) { // Tecla Escape
                inOptionsMenu = 1;
                refreshDisplay(file, cursorPosition, inOptionsMenu);
            } else {
                fseek(file, cursorPosition, SEEK_SET); // Posiciona o cursor no arquivo
                fputc(ch, file); // Escreve o caractere no arquivo
                fflush(file);
                rewind(file); // Volta para o início do arquivo
                refreshDisplay(file, cursorPosition, inOptionsMenu); // Atualiza a exibição
            }
        }
    } while (1);

    fclose(file);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <ctype.h>

#define COLS 16
#define ROWS 24

void clearFileContent(FILE *file) {
    fseek(file, 0, SEEK_SET);
    for (int i = 0; i < ROWS * COLS; i++) {
        fputc(0, file);
    }
    rewind(file);
}

void displayHexAscii(FILE *file, long cursorPosition, int topRow) {
    unsigned char matriz[ROWS][COLS];
    unsigned char aux;
    unsigned char l =  0;
    unsigned char c =  0;

    fseek(file, topRow * COLS, SEEK_SET);

    while (l < ROWS && !feof(file)) {
        fread(&aux, 1, 1, file);
        matriz[l][c] = aux;
        c++;
        if (c >= COLS) {
            c = 0;
            l++;
        }
    }

    rewind(file);

    system("cls");

    printf("\n\n");

    for (int i = 0; i < ROWS; i++) {
        printf(" ");
        for (int j = 0; j < COLS; j++) {
            printf("%02X ", matriz[i][j]);
        }
        printf(" ");
        for (int j = 0; j < COLS; j++) {
            if (isprint(matriz[i][j]))
                printf("%c", matriz[i][j]);
            else
                printf(".");
        }
        printf("\n");
    }

    printf("\n%20s", "");
    for (int j = 0; j < COLS; j++) {
        printf("%02d ", j);
    }

    printf("\n\nPosição do cursor: %04X (%ld)\n", cursorPosition, cursorPosition);
}

void readFile(FILE *file) {
    fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    rewind(file);

    char *buffer = (char *)malloc(fileSize);
    if (buffer == NULL) {
        printf("Falha na alocação de memória\n");
        exit(1);
    }

    fread(buffer, sizeof(char), fileSize, file);
    printf("Conteúdo do arquivo:\n%s\n", buffer);

    free(buffer);
}

int main(void) {
    FILE *file;
    char filename[100];
    long cursorPosition = 0;
    int topRow = 0;

    printf("\n\nOpcoes:\n");
    printf("1. Limpar\n");
    printf("2. Salvar\n");
    printf("3. Ler\n");

    printf("\nDigite o local do arquivo: ");
    scanf("%s", filename);

    if ((file = fopen(filename, "r+")) == NULL) {
        printf("\nFalha ao abrir o arquivo.");
        return -1;
    }

    displayHexAscii(file, cursorPosition, topRow);

    printf("\n\n'Tab' para salvar alteracoes, 'Ctrl' para ler o conteudo do arquivo, 'Backspace' para limpar o conteudo do arquivo e 'Enter' para sair sem salvar.\n");

    int ch;
    do {
        ch = getch();

        if (ch == 224) {
            ch = getch();
            switch(ch) {
                case 72: // Seta para cima
                    if (cursorPosition >= COLS)
                        cursorPosition -= COLS;
                    else if (topRow > 0)
                        topRow--;
                    break;
                case 80: // Seta para baixo
                    if (cursorPosition < ROWS * COLS - COLS)
                        cursorPosition += COLS;
                    else if (topRow < ROWS - 1)
                        topRow++;
                    break;
                case 75: // Seta para a esquerda
                    if (cursorPosition > 0)
                        cursorPosition--;
                    break;
                case 77: // Seta para a direita
                    if (cursorPosition < ROWS * COLS - 1)
                        cursorPosition++;
                    break;
            }

            displayHexAscii(file, cursorPosition, topRow);
        } else if (ch == 9) { // Tecla 'Tab'
            printf("\nSalvando alterações e saindo...\n");
            break;
        } else if (ch == 3) { // Tecla 'Ctrl'
            printf("\nLendo o conteúdo do arquivo...\n");
            readFile(file);
            displayHexAscii(file, cursorPosition, topRow);
        } else if (ch == 13) { // Tecla 'Enter'
            printf("\nSaindo sem salvar...\n");
            break;
        } else if (isprint(ch)) {
            fseek(file, cursorPosition, SEEK_SET);
            fputc(ch, file);
            cursorPosition++;
            displayHexAscii(file, cursorPosition, topRow);
        }
    } while (1);

    fclose(file);

    return 0;


    }
